/*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/'use strict';var cov_i4x4z9jzl=function(){var path='/home/qmq/tool/caliper/src/comm/rate-control/fixedRate.js',hash='b5008f26836ab7919ad0bbd2151f33a934884b9c',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/qmq/tool/caliper/src/comm/rate-control/fixedRate.js',statementMap:{'0':{start:{line:17,column:20},end:{line:17,column:49}},'1':{start:{line:18,column:12},end:{line:18,column:36}},'2':{start:{line:35,column:8},end:{line:35,column:32}},'3':{start:{line:44,column:20},end:{line:44,column:36}},'4':{start:{line:45,column:29},end:{line:45,column:78}},'5':{start:{line:46,column:8},end:{line:46,column:68}},'6':{start:{line:58,column:8},end:{line:60,column:9}},'7':{start:{line:59,column:12},end:{line:59,column:37}},'8':{start:{line:61,column:20},end:{line:61,column:63}},'9':{start:{line:62,column:8},end:{line:67,column:9}},'10':{start:{line:63,column:12},end:{line:63,column:31}},'11':{start:{line:66,column:12},end:{line:66,column:37}},'12':{start:{line:71,column:0},end:{line:71,column:27}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:34},end:{line:36,column:5}},line:34},'1':{name:'(anonymous_1)',decl:{start:{line:42,column:4},end:{line:42,column:5}},loc:{start:{line:42,column:14},end:{line:47,column:5}},line:42},'2':{name:'(anonymous_2)',decl:{start:{line:57,column:4},end:{line:57,column:5}},loc:{start:{line:57,column:49},end:{line:68,column:5}},line:57}},branchMap:{'0':{loc:{start:{line:45,column:29},end:{line:45,column:78}},type:'cond-expr',locations:[{start:{line:45,column:49},end:{line:45,column:71}},{start:{line:45,column:75},end:{line:45,column:78}}],line:45},'1':{loc:{start:{line:46,column:25},end:{line:46,column:67}},type:'cond-expr',locations:[{start:{line:46,column:46},end:{line:46,column:63}},{start:{line:46,column:66},end:{line:46,column:67}}],line:46},'2':{loc:{start:{line:58,column:8},end:{line:60,column:9}},type:'if',locations:[{start:{line:58,column:8},end:{line:60,column:9}},{start:{line:58,column:8},end:{line:60,column:9}}],line:58},'3':{loc:{start:{line:62,column:8},end:{line:67,column:9}},type:'if',locations:[{start:{line:62,column:8},end:{line:67,column:9}},{start:{line:62,column:8},end:{line:67,column:9}}],line:62}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0},f:{'0':0,'1':0,'2':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();let RateInterface=(cov_i4x4z9jzl.s[0]++,require('./rateInterface.js'));let Sleep=(cov_i4x4z9jzl.s[1]++,require('../util').sleep);/**
 * This controller will send transactions at a specified fixed interval.
 *
 * The TPS rate must be specified within the options for the controller type:
 * "rateControl" : [{"type": "fixed-rate", "opts": {"tps" : 10}}]
 *
 */class FixedRate extends RateInterface{/**
     * Constructor
     * @param {Object} blockchain the blockchain under test
     * @param {JSON} opts the configuration options
     */constructor(blockchain,opts){cov_i4x4z9jzl.f[0]++;cov_i4x4z9jzl.s[2]++;super(blockchain,opts);}/**
     * Initialise the rate controller with a passed msg object
     * @param {JSON} msg the initialisation message
     */init(msg){cov_i4x4z9jzl.f[1]++;// Use the passed tps option
let tps=(cov_i4x4z9jzl.s[3]++,this.options.tps);let tpsPerClient=(cov_i4x4z9jzl.s[4]++,msg.totalClients?(cov_i4x4z9jzl.b[0][0]++,tps/msg.totalClients):(cov_i4x4z9jzl.b[0][1]++,tps));cov_i4x4z9jzl.s[5]++;this.sleepTime=tpsPerClient>0?(cov_i4x4z9jzl.b[1][0]++,1000/tpsPerClient):(cov_i4x4z9jzl.b[1][1]++,0);}/**
    * Perform the rate control action based on knowledge of the start time, current index, and current results.
    * - Sleep a suitable time according to the required transaction generation time
    * @param {Number} start generation time of the first test transaction
    * @param {Number} idx sequence number of the current test transaction
    * @param {Object[]} currentResults current result set
    * @return {Promise} the return promise
    */applyRateControl(start,idx,currentResults){cov_i4x4z9jzl.f[2]++;cov_i4x4z9jzl.s[6]++;if(this.sleepTime===0){cov_i4x4z9jzl.b[2][0]++;cov_i4x4z9jzl.s[7]++;return Promise.resolve();}else{cov_i4x4z9jzl.b[2][1]++;}let diff=(cov_i4x4z9jzl.s[8]++,this.sleepTime*idx-(Date.now()-start));cov_i4x4z9jzl.s[9]++;if(diff>5){cov_i4x4z9jzl.b[3][0]++;cov_i4x4z9jzl.s[10]++;return Sleep(diff);}else{cov_i4x4z9jzl.b[3][1]++;cov_i4x4z9jzl.s[11]++;return Promise.resolve();}}}cov_i4x4z9jzl.s[12]++;module.exports=FixedRate;