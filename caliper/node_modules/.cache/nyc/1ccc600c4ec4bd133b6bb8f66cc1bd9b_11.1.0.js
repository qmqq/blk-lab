/**
 * Copyright 2017 HUAWEI All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 **/'use strict';var cov_20fg7pbdz9=function(){var path='/home/qmq/tool/caliper/src/sawtooth/Application/SimpleBatchBuilder.js',hash='7573f49edef16bec1cc108e931ffa30ed0d7611c',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/qmq/tool/caliper/src/sawtooth/Application/SimpleBatchBuilder.js',statementMap:{'0':{start:{line:10,column:21},end:{line:10,column:49}},'1':{start:{line:24,column:8},end:{line:24,column:16}},'2':{start:{line:25,column:8},end:{line:25,column:32}},'3':{start:{line:26,column:8},end:{line:26,column:38}},'4':{start:{line:35,column:29},end:{line:35,column:46}},'5':{start:{line:36,column:47},end:{line:36,column:78}},'6':{start:{line:37,column:24},end:{line:37,column:50}},'7':{start:{line:38,column:27},end:{line:38,column:50}},'8':{start:{line:40,column:27},end:{line:40,column:56}},'9':{start:{line:41,column:23},end:{line:41,column:71}},'10':{start:{line:43,column:27},end:{line:43,column:29}},'11':{start:{line:44,column:8},end:{line:70,column:9}},'12':{start:{line:45,column:25},end:{line:45,column:40}},'13':{start:{line:46,column:28},end:{line:46,column:55}},'14':{start:{line:47,column:30},end:{line:47,column:39}},'15':{start:{line:49,column:25},end:{line:49,column:40}},'16':{start:{line:50,column:33},end:{line:50,column:53}},'17':{start:{line:52,column:43},end:{line:61,column:23}},'18':{start:{line:63,column:33},end:{line:63,column:68}},'19':{start:{line:64,column:32},end:{line:68,column:14}},'20':{start:{line:69,column:12},end:{line:69,column:43}},'21':{start:{line:72,column:33},end:{line:75,column:19}},'22':{start:{line:74,column:54},end:{line:74,column:73}},'23':{start:{line:77,column:31},end:{line:77,column:60}},'24':{start:{line:78,column:22},end:{line:82,column:10}},'25':{start:{line:84,column:31},end:{line:86,column:19}},'26':{start:{line:88,column:8},end:{line:88,column:30}},'27':{start:{line:97,column:23},end:{line:97,column:40}},'28':{start:{line:98,column:22},end:{line:99,column:77}},'29':{start:{line:99,column:12},end:{line:99,column:77}},'30':{start:{line:100,column:32},end:{line:100,column:70}},'31':{start:{line:101,column:22},end:{line:101,column:62}},'32':{start:{line:102,column:8},end:{line:102,column:23}},'33':{start:{line:105,column:0},end:{line:105,column:36}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:23,column:4},end:{line:23,column:5}},loc:{start:{line:23,column:33},end:{line:27,column:5}},line:23},'1':{name:'(anonymous_1)',decl:{start:{line:34,column:4},end:{line:34,column:5}},loc:{start:{line:34,column:21},end:{line:89,column:5}},line:34},'2':{name:'(anonymous_2)',decl:{start:{line:74,column:45},end:{line:74,column:46}},loc:{start:{line:74,column:54},end:{line:74,column:73}},line:74},'3':{name:'(anonymous_3)',decl:{start:{line:96,column:4},end:{line:96,column:5}},loc:{start:{line:96,column:27},end:{line:103,column:5}},line:96},'4':{name:'(anonymous_4)',decl:{start:{line:98,column:22},end:{line:98,column:23}},loc:{start:{line:99,column:12},end:{line:99,column:77}},line:99}},branchMap:{},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0},b:{},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const BatchBuilder=(cov_20fg7pbdz9.s[0]++,require('./BatchBuilder.js'));/**
 * BatchBuilder for simple use case and it use case specific logic to
 * buildBatch and calculateAddress
 */class SimpleBatchBuilder extends BatchBuilder{/**
     * Constructor
     * @param {String} fName transaction family name
     * @param {String} fVersion transaction family version
     */constructor(fName,fVersion){cov_20fg7pbdz9.f[0]++;cov_20fg7pbdz9.s[1]++;super();cov_20fg7pbdz9.s[2]++;this.familyName=fName;cov_20fg7pbdz9.s[3]++;this.familyVersion=fVersion;}/**
     * Builds sawtooth batch from list of simple transactions
     * @param {object} args list smallbank transactions
     * @returns {object} batch list bytes
     */buildBatch(args){cov_20fg7pbdz9.f[1]++;const{createHash}=(cov_20fg7pbdz9.s[4]++,require('crypto'));const{createContext,CryptoFactory}=(cov_20fg7pbdz9.s[5]++,require('sawtooth-sdk/signing'));const context=(cov_20fg7pbdz9.s[6]++,createContext('secp256k1'));const{protobuf}=(cov_20fg7pbdz9.s[7]++,require('sawtooth-sdk'));const privateKey=(cov_20fg7pbdz9.s[8]++,context.newRandomPrivateKey());const signer=(cov_20fg7pbdz9.s[9]++,new CryptoFactory(context).newSigner(privateKey));let transactions=(cov_20fg7pbdz9.s[10]++,[]);cov_20fg7pbdz9.s[11]++;for(let i=0;i<args.length;i++){const addr=(cov_20fg7pbdz9.s[12]++,args[i].account);const address=(cov_20fg7pbdz9.s[13]++,this.calculateAddress(addr));const addresses=(cov_20fg7pbdz9.s[14]++,[address]);const cbor=(cov_20fg7pbdz9.s[15]++,require('cbor'));const payloadBytes=(cov_20fg7pbdz9.s[16]++,cbor.encode(args[i]));const transactionHeaderBytes=(cov_20fg7pbdz9.s[17]++,protobuf.TransactionHeader.encode({familyName:this.familyName,familyVersion:this.familyVersion,inputs:addresses,outputs:addresses,signerPublicKey:signer.getPublicKey().asHex(),batcherPublicKey:signer.getPublicKey().asHex(),dependencies:[],payloadSha512:createHash('sha512').update(payloadBytes).digest('hex')}).finish());const txnSignature=(cov_20fg7pbdz9.s[18]++,signer.sign(transactionHeaderBytes));const transaction=(cov_20fg7pbdz9.s[19]++,protobuf.Transaction.create({header:transactionHeaderBytes,headerSignature:txnSignature,payload:payloadBytes}));cov_20fg7pbdz9.s[20]++;transactions.push(transaction);}const batchHeaderBytes=(cov_20fg7pbdz9.s[21]++,protobuf.BatchHeader.encode({signerPublicKey:signer.getPublicKey().asHex(),transactionIds:transactions.map(txn=>{cov_20fg7pbdz9.f[2]++;cov_20fg7pbdz9.s[22]++;return txn.headerSignature;})}).finish());const batchSignature=(cov_20fg7pbdz9.s[23]++,signer.sign(batchHeaderBytes));const batch=(cov_20fg7pbdz9.s[24]++,protobuf.Batch.create({header:batchHeaderBytes,headerSignature:batchSignature,transactions:transactions}));const batchListBytes=(cov_20fg7pbdz9.s[25]++,protobuf.BatchList.encode({batches:[batch]}).finish());cov_20fg7pbdz9.s[26]++;return batchListBytes;}/**
     * Calculate address
     * @param {*} name address name
     * @return {String} address
     */calculateAddress(name){cov_20fg7pbdz9.f[3]++;const crypto=(cov_20fg7pbdz9.s[27]++,require('crypto'));cov_20fg7pbdz9.s[28]++;const _hash=x=>{cov_20fg7pbdz9.f[4]++;cov_20fg7pbdz9.s[29]++;return crypto.createHash('sha512').update(x).digest('hex').toLowerCase();};const familyNameSpace=(cov_20fg7pbdz9.s[30]++,_hash(this.familyName).substring(0,6));let address=(cov_20fg7pbdz9.s[31]++,familyNameSpace+_hash(name).slice(-64));cov_20fg7pbdz9.s[32]++;return address;}}cov_20fg7pbdz9.s[33]++;module.exports=SimpleBatchBuilder;