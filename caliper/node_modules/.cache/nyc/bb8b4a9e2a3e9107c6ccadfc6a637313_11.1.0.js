/*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/'use strict';var cov_4gf4mfyia=function(){var path='/home/qmq/tool/caliper/src/comm/rate-control/pidRate.js',hash='4cd4c91a71f2b6c326f6da3e6264c94979437ecb',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/qmq/tool/caliper/src/comm/rate-control/pidRate.js',statementMap:{'0':{start:{line:17,column:22},end:{line:17,column:51}},'1':{start:{line:18,column:14},end:{line:18,column:38}},'2':{start:{line:19,column:15},end:{line:19,column:57}},'3':{start:{line:40,column:8},end:{line:40,column:32}},'4':{start:{line:49,column:8},end:{line:49,column:50}},'5':{start:{line:50,column:8},end:{line:50,column:44}},'6':{start:{line:51,column:8},end:{line:51,column:40}},'7':{start:{line:52,column:8},end:{line:52,column:43}},'8':{start:{line:55,column:8},end:{line:55,column:82}},'9':{start:{line:56,column:8},end:{line:56,column:78}},'10':{start:{line:59,column:8},end:{line:59,column:45}},'11':{start:{line:60,column:8},end:{line:60,column:26}},'12':{start:{line:78,column:20},end:{line:78,column:61}},'13':{start:{line:80,column:8},end:{line:82,column:9}},'14':{start:{line:81,column:12},end:{line:81,column:56}},'15':{start:{line:85,column:8},end:{line:85,column:66}},'16':{start:{line:86,column:16},end:{line:86,column:31}},'17':{start:{line:87,column:16},end:{line:87,column:39}},'18':{start:{line:88,column:16},end:{line:88,column:65}},'19':{start:{line:91,column:8},end:{line:91,column:35}},'20':{start:{line:94,column:8},end:{line:94,column:46}},'21':{start:{line:96,column:8},end:{line:101,column:9}},'22':{start:{line:97,column:12},end:{line:97,column:49}},'23':{start:{line:98,column:12},end:{line:98,column:49}},'24':{start:{line:99,column:12},end:{line:99,column:49}},'25':{start:{line:100,column:12},end:{line:100,column:57}},'26':{start:{line:103,column:8},end:{line:107,column:9}},'27':{start:{line:104,column:12},end:{line:104,column:37}},'28':{start:{line:106,column:12},end:{line:106,column:37}},'29':{start:{line:111,column:0},end:{line:111,column:25}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:39,column:4},end:{line:39,column:5}},loc:{start:{line:39,column:34},end:{line:41,column:5}},line:39},'1':{name:'(anonymous_1)',decl:{start:{line:47,column:4},end:{line:47,column:5}},loc:{start:{line:47,column:14},end:{line:61,column:5}},line:47},'2':{name:'(anonymous_2)',decl:{start:{line:71,column:4},end:{line:71,column:5}},loc:{start:{line:71,column:51},end:{line:108,column:5}},line:71}},branchMap:{'0':{loc:{start:{line:55,column:21},end:{line:55,column:81}},type:'cond-expr',locations:[{start:{line:55,column:47},end:{line:55,column:75}},{start:{line:55,column:78},end:{line:55,column:81}}],line:55},'1':{loc:{start:{line:56,column:24},end:{line:56,column:77}},type:'cond-expr',locations:[{start:{line:56,column:48},end:{line:56,column:69}},{start:{line:56,column:72},end:{line:56,column:77}}],line:56},'2':{loc:{start:{line:80,column:8},end:{line:82,column:9}},type:'if',locations:[{start:{line:80,column:8},end:{line:82,column:9}},{start:{line:80,column:8},end:{line:82,column:9}}],line:80},'3':{loc:{start:{line:96,column:8},end:{line:101,column:9}},type:'if',locations:[{start:{line:96,column:8},end:{line:101,column:9}},{start:{line:96,column:8},end:{line:101,column:9}}],line:96},'4':{loc:{start:{line:103,column:8},end:{line:107,column:9}},type:'if',locations:[{start:{line:103,column:8},end:{line:107,column:9}},{start:{line:103,column:8},end:{line:107,column:9}}],line:103}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0},f:{'0':0,'1':0,'2':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();let RateInterface=(cov_4gf4mfyia.s[0]++,require('./rateInterface.js'));let Sleep=(cov_4gf4mfyia.s[1]++,require('../util').sleep);let Logger=(cov_4gf4mfyia.s[2]++,require('../util').getLogger('pidRate.js'));/**
 * Basic PID Controller for driving at a target loading (backlog transactions). This controller will aim to maintain a defined backlog
 * of transactions by modifying the driven TPS.
 *
 * The target loading, initial TPS rate and gains for the controller must be specified within the options for the controller type:
 * "rateControl" : [{"type": "pid-rate", "opts": {"targetLoad": 5, "initialTPS": 2, "proportional": 0.2, "integral": 0.0001, "derrivative": 0.1}}]
 *
 * To view controller output to assist in modifying the controller gains, an additional 'showVars' option must be specified:
 * "rateControl" : [{"type": "pid-rate", "opts": {"targetLoad": 5, "initialTPS": 2, "proportional": 0.2, "integral": 0.0001, "derrivative": 0.1, "showVars": true}}]
 *
 */class PidRate extends RateInterface{/**
     * Constructor
     * @param {Object} blockchain the blockchain under test
     * @param {JSON} opts the configuration options
     */constructor(blockchain,opts){cov_4gf4mfyia.f[0]++;cov_4gf4mfyia.s[3]++;super(blockchain,opts);}/**
     * Initialise the rate controller with a passed msg object
     * @param {JSON} msg the initialisation message
     */init(msg){cov_4gf4mfyia.f[1]++;cov_4gf4mfyia.s[4]++;// Required
this.targetLoad=this.options.targetLoad;cov_4gf4mfyia.s[5]++;this.Kp=this.options.proportional;cov_4gf4mfyia.s[6]++;this.Ki=this.options.integral;cov_4gf4mfyia.s[7]++;this.Kd=this.options.derrivative;// Optional
cov_4gf4mfyia.s[8]++;this.sleep=this.options.initialTPS?(cov_4gf4mfyia.b[0][0]++,1000/this.options.initialTPS):(cov_4gf4mfyia.b[0][1]++,100);cov_4gf4mfyia.s[9]++;this.showVars=this.options.showVars?(cov_4gf4mfyia.b[1][0]++,this.options.showVars):(cov_4gf4mfyia.b[1][1]++,false);// Internal variables
cov_4gf4mfyia.s[10]++;this.previousError=this.targetLoad;cov_4gf4mfyia.s[11]++;this.integral=0;}/**
    * Perform the rate control action based on knowledge of the start time, current index, and current results.
    * - Sleep based on targetting a specific working load through a basic PID controller
    * @param {Number} start generation time of the first test transaction
    * @param {Number} idx sequence number of the current test transaction
    * @param {Object[]} unhandledResults current result set
    * @return {Promise} the return promise
    */applyRateControl(start,idx,unhandledResults){cov_4gf4mfyia.f[2]++;// We steer the load by increasing/decreasing the sleep time to adjust the TPS using a basic PID controller
// We will only observe currentResults growth once the txn is complete and a result is available
// -at this point the txn will either be in state success/fail
// Update current transaction backlog error
// error = what you want - what you have
let error=(cov_4gf4mfyia.s[12]++,this.targetLoad-unhandledResults.length);cov_4gf4mfyia.s[13]++;if(this.showVars){cov_4gf4mfyia.b[2][0]++;cov_4gf4mfyia.s[14]++;Logger.debug('Current load error: ',error);}else{cov_4gf4mfyia.b[2][1]++;}// Determine Controller Coeffients
cov_4gf4mfyia.s[15]++;this.integral=this.integral+error*this.sleep/1000;let P=(cov_4gf4mfyia.s[16]++,this.Kp*error);let I=(cov_4gf4mfyia.s[17]++,this.Ki*this.integral);let D=(cov_4gf4mfyia.s[18]++,this.Kd*(error-this.previousError)/this.sleep);// Update error variable
cov_4gf4mfyia.s[19]++;this.previousError=error;// Update the sleep time
cov_4gf4mfyia.s[20]++;this.sleep=this.sleep-(P+I+D);cov_4gf4mfyia.s[21]++;if(this.showVars){cov_4gf4mfyia.b[3][0]++;cov_4gf4mfyia.s[22]++;Logger.debug('Current P value: ',P);cov_4gf4mfyia.s[23]++;Logger.debug('Current I value: ',I);cov_4gf4mfyia.s[24]++;Logger.debug('Current D value: ',D);cov_4gf4mfyia.s[25]++;Logger.debug('New sleep time: ',this.sleep);}else{cov_4gf4mfyia.b[3][1]++;}cov_4gf4mfyia.s[26]++;if(this.sleep>5){cov_4gf4mfyia.b[4][0]++;cov_4gf4mfyia.s[27]++;return Sleep(this.sleep);}else{cov_4gf4mfyia.b[4][1]++;cov_4gf4mfyia.s[28]++;return Promise.resolve();}}}cov_4gf4mfyia.s[29]++;module.exports=PidRate;